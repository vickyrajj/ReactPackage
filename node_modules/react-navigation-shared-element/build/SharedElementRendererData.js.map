{"version":3,"file":"SharedElementRendererData.js","sourceRoot":"","sources":["../src/SharedElementRendererData.ts"],"names":[],"mappings":"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","sourcesContent":["import SharedElementSceneData, {\n  SharedElementSceneEventType\n} from \"./SharedElementSceneData\";\nimport {\n  SharedElementEventSubscription,\n  SharedElementsStrictConfig,\n  SharedElementAnimatedValue,\n  SharedElementTransitionProps,\n  Route\n} from \"./types\";\nimport { normalizeSharedElementsConfig } from \"./utils\";\n\nexport type SharedElementRendererUpdateHandler = () => any;\n\nexport interface ISharedElementRendererData {\n  startTransition(\n    closing: boolean,\n    navigatorId: string,\n    nestingDepth: number\n  ): void;\n  endTransition(\n    closing: boolean,\n    navigatorId: string,\n    nestingDepth: number\n  ): void;\n  updateSceneState(\n    sceneData: SharedElementSceneData,\n    route: Route,\n    sceneEvent: SharedElementSceneEventType\n  ): void;\n  readonly nestingDepth: number;\n  addDebugRef(): number;\n  releaseDebugRef(): number;\n}\n\nfunction getSharedElements(\n  sceneData: SharedElementSceneData,\n  otherSceneData: SharedElementSceneData,\n  showing: boolean\n): SharedElementsStrictConfig | null {\n  const { sharedElements } = sceneData.Component;\n  if (!sharedElements) return null;\n  return normalizeSharedElementsConfig(\n    sharedElements(sceneData.navigation, otherSceneData.navigation, showing)\n  );\n}\n\nconst NO_SHARED_ELEMENTS: any[] = [];\n\ntype SceneRoute = {\n  scene: SharedElementSceneData;\n  route: Route;\n  subscription: SharedElementEventSubscription | null;\n};\n\n/**\n * TODO\n * - [ ] Not all lifecycle events not emitted by stack when using gestures (close modal)\n */\n\nexport default class SharedElementRendererData\n  implements ISharedElementRendererData {\n  private scenes: SceneRoute[] = [];\n  private updateSubscribers = new Set<SharedElementRendererUpdateHandler>();\n  private sharedElements: SharedElementsStrictConfig | null = null;\n  private isShowing: boolean = true;\n\n  private route: Route | null = null;\n  private prevRoute: Route | null = null;\n  private routeAnimValue: SharedElementAnimatedValue;\n\n  private scene: SharedElementSceneData | null = null;\n  private prevScene: SharedElementSceneData | null = null;\n  private sceneAnimValue: SharedElementAnimatedValue;\n\n  private isTransitionStarted: boolean = false;\n  private isTransitionClosing: boolean = false;\n  private transitionNavigatorId: string = \"\";\n  private transitionNestingDepth: number = -1;\n\n  public debugRefCount: number = 0;\n\n  startTransition(closing: boolean, navigatorId: string, nestingDepth: number) {\n    if (this.debug)\n      console.debug(\n        `[${navigatorId}]startTransition, closing: ${closing}, nestingDepth: ${nestingDepth}`\n      );\n\n    if (!this.isTransitionStarted || this.route) {\n      this.prevRoute = this.route;\n      this.route = null;\n      this.routeAnimValue = null;\n\n      // When a transition wasn't completely fully, but a new transition\n      // has already started, then the `willBlur` event is not called.\n      // For this particular case, we capture the animation-value of the\n      // last (previous) scene that is now being hidden.\n      if (this.isTransitionStarted) {\n        const scene = this.getScene(this.prevRoute);\n        if (scene) {\n          this.routeAnimValue = scene.getAnimValue(true);\n        }\n      }\n\n      this.isTransitionStarted = true;\n      this.isTransitionClosing = closing;\n      this.transitionNavigatorId = navigatorId;\n      this.transitionNestingDepth = nestingDepth;\n    } else {\n      // When navigators are nested, `startTransition` may be called multiple\n      // times. In such as case, we want to use the most shallow navigator,\n      // as that is the one doing the transition.\n      if (nestingDepth < this.transitionNestingDepth) {\n        this.transitionNavigatorId = navigatorId;\n        this.transitionNestingDepth = nestingDepth;\n      }\n    }\n  }\n\n  endTransition(closing: boolean, navigatorId: string, nestingDepth: number) {\n    if (this.debug)\n      console.debug(\n        `[${navigatorId}]endTransition, closing: ${closing}, nestingDepth: ${nestingDepth}`\n      );\n\n    if (\n      !this.isTransitionStarted ||\n      this.transitionNavigatorId !== navigatorId\n    ) {\n      return;\n    }\n\n    this.isTransitionStarted = false;\n\n    if (this.prevRoute != null) {\n      this.prevRoute = null;\n      this.routeAnimValue = null;\n      this.updateSceneListeners();\n      this.updateSharedElements();\n    }\n  }\n\n  updateSceneState(\n    sceneData: SharedElementSceneData,\n    route: Route,\n    sceneEvent: SharedElementSceneEventType\n  ): void {\n    switch (sceneEvent) {\n      case \"willFocus\":\n        return this.willFocusScene(sceneData, route);\n      case \"didFocus\":\n        return this.didFocusScene(sceneData, route);\n      //case \"willBlur\":\n      //return this.willBlurScene(sceneData, route);\n    }\n  }\n\n  addDebugRef(): number {\n    return ++this.debugRefCount;\n  }\n\n  releaseDebugRef(): number {\n    return --this.debugRefCount;\n  }\n\n  get debug() {\n    return this.debugRefCount > 0;\n  }\n\n  willFocusScene(sceneData: SharedElementSceneData, route: Route): void {\n    if (this.debug)\n      console.debug(\n        `[${sceneData.navigatorId}]willFocus, scene: \"${sceneData.name}\", depth: ${sceneData.nestingDepth}, closing: ${this.isTransitionClosing}`\n      );\n    this.registerScene(sceneData, route);\n\n    // Wait for a transition start, before starting any animations\n    if (!this.isTransitionStarted) return;\n\n    // Use the animation value from the navigator that\n    // started the transition\n    if (this.prevRoute) {\n      const scene = this.isTransitionClosing\n        ? this.getScene(this.prevRoute)\n        : sceneData;\n      if (scene?.navigatorId === this.transitionNavigatorId) {\n        this.routeAnimValue = scene?.getAnimValue(this.isTransitionClosing);\n      }\n    }\n\n    // In case of nested navigators, multiple scenes will become\n    // activated. Make sure to use the scene that is nested most deeply,\n    // as this will be the one visible to the user\n    if (!this.route) {\n      this.route = route;\n    } else {\n      const routeScene = this.getScene(this.route);\n      if (routeScene && routeScene.nestingDepth <= sceneData.nestingDepth) {\n        this.route = route;\n      }\n    }\n\n    // Update transition\n    if (this.prevRoute && this.route && this.routeAnimValue) {\n      this.updateSceneListeners();\n      this.updateSharedElements();\n    }\n  }\n\n  didFocusScene(sceneData: SharedElementSceneData, route: Route): void {\n    if (this.debug)\n      console.debug(\n        `[${sceneData.navigatorId}]didFocus, scene: \"${sceneData.name}\", depth: ${sceneData.nestingDepth}`\n      );\n\n    if (!this.route || this.prevRoute) {\n      this.route = route;\n    } else {\n      const routeScene = this.getScene(this.route);\n      if (routeScene && routeScene.nestingDepth <= sceneData.nestingDepth) {\n        this.route = route;\n      }\n    }\n    this.registerScene(sceneData, route);\n  }\n\n  /*willBlurScene(\n    sceneData: SharedElementSceneData,\n    // @ts-ignore\n    route: Route // eslint-disable-line @typescript-eslint/no-unused-vars\n  ): void {\n    if (this.debug)\n      console.debug(\n        `[${sceneData.navigatorId}]willBlur, scene: \"${sceneData.name}\", depth: ${sceneData.nestingDepth}`\n      );\n\n    // Wait for a transition start, before starting any animations\n    if (!this.isTransitionStarted) return;\n\n    // Use the animation value from the navigator that\n    // started the transition\n    if (\n      this.isTransitionClosing &&\n      sceneData.navigatorId === this.transitionNavigatorId &&\n      !this.routeAnimValue\n    ) {\n      this.routeAnimValue = sceneData.getAnimValue(this.isTransitionClosing);\n    }\n\n    // Update transition\n    if (this.prevRoute && this.route && this.routeAnimValue) {\n      this.updateSceneListeners();\n      this.updateSharedElements();\n    }\n  }*/\n\n  private registerScene(sceneData: SharedElementSceneData, route: Route) {\n    this.scenes.push({\n      scene: sceneData,\n      route,\n      subscription: null\n    });\n    if (this.scenes.length > 10) {\n      const { subscription } = this.scenes[0];\n      this.scenes.splice(0, 1);\n      if (subscription) subscription.remove();\n    }\n    this.updateSceneListeners();\n  }\n\n  private updateSceneListeners() {\n    this.scenes.forEach(sceneRoute => {\n      const { scene, route, subscription } = sceneRoute;\n      const isActive =\n        (this.route && this.route.key === route.key) ||\n        (this.prevRoute && this.prevRoute.key === route.key);\n      if (isActive && !subscription) {\n        sceneRoute.subscription = scene.addUpdateListener(() => {\n          // TODO optimize\n          this.emitUpdateEvent();\n        });\n      } else if (!isActive && subscription) {\n        sceneRoute.subscription = null;\n        subscription.remove();\n      }\n    });\n  }\n\n  private getScene(route: Route | null): SharedElementSceneData | null {\n    const sceneRoute = route\n      ? this.scenes.find(sc => sc.route.key === route.key)\n      : undefined;\n    return sceneRoute ? sceneRoute.scene : null;\n  }\n\n  private updateSharedElements() {\n    const { route, prevRoute, routeAnimValue } = this;\n    const scene = this.getScene(route);\n    const prevScene = this.getScene(prevRoute);\n    const sceneAnimValue = routeAnimValue;\n\n    // Update current scene & previous scene\n    if (\n      scene === this.scene &&\n      prevScene === this.prevScene &&\n      sceneAnimValue === this.sceneAnimValue\n    )\n      return;\n    this.scene = scene;\n    this.prevScene = prevScene;\n    this.sceneAnimValue = sceneAnimValue;\n\n    // Update shared elements\n    let sharedElements: SharedElementsStrictConfig | null = null;\n    let isShowing = true;\n    if (sceneAnimValue && scene && prevScene) {\n      sharedElements = getSharedElements(scene, prevScene, true);\n      if (!sharedElements) {\n        isShowing = false;\n        sharedElements = getSharedElements(prevScene, scene, false);\n      }\n    }\n    if (this.sharedElements !== sharedElements) {\n      if (this.debug) {\n        if (sharedElements) {\n          console.debug(\n            `Transition start: \"${prevScene?.name}\" -> \"${\n              scene?.name\n            }\", elements: ${JSON.stringify(sharedElements, undefined, 2)}`\n          );\n        } else {\n          console.debug(`Transition end: \"${scene?.name}\"`);\n        }\n      }\n      this.sharedElements = sharedElements;\n      this.isShowing = isShowing;\n      /*console.log(\n        'updateSharedElements: ',\n        sharedElements,\n        ' ,isShowing: ',\n        isShowing,\n        ', animValue: ',\n        animValue\n      );*/\n      this.emitUpdateEvent();\n    }\n  }\n\n  addUpdateListener(\n    handler: SharedElementRendererUpdateHandler\n  ): SharedElementEventSubscription {\n    this.updateSubscribers.add(handler);\n    return {\n      remove: () => this.updateSubscribers.delete(handler)\n    };\n  }\n\n  private emitUpdateEvent(): void {\n    this.updateSubscribers.forEach(handler => handler());\n  }\n\n  getTransitions(): SharedElementTransitionProps[] {\n    const {\n      sharedElements,\n      prevScene,\n      scene,\n      isShowing,\n      sceneAnimValue,\n      route\n    } = this;\n\n    if (!sharedElements || !scene || !prevScene || !route)\n      return NO_SHARED_ELEMENTS;\n    return sharedElements.map(({ id, otherId, ...other }) => {\n      const startId = isShowing ? otherId || id : id;\n      const endId = isShowing ? id : otherId || id;\n      return {\n        key: route.key,\n        position: sceneAnimValue,\n        start: {\n          ancestor: (prevScene ? prevScene.getAncestor() : undefined) || null,\n          node: (prevScene ? prevScene.getNode(startId) : undefined) || null\n        },\n        end: {\n          ancestor: (scene ? scene.getAncestor() : undefined) || null,\n          node: (scene ? scene.getNode(endId) : undefined) || null\n        },\n        ...other\n      };\n    });\n  }\n\n  get nestingDepth(): number {\n    return 0;\n  }\n}\n"]}
{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  SharedElementNode,\n  SharedElementAnimation,\n  SharedElementResize,\n  SharedElementAlign,\n  SharedElementTransitionProps\n} from \"react-native-shared-element\";\n\nexport {\n  SharedElementNode,\n  SharedElementAnimation,\n  SharedElementTransitionProps\n};\n\nexport type Route = {\n  key: string;\n  routeName: string;\n};\n\nexport type NavigationEventName =\n  | \"willFocus\"\n  | \"didFocus\"\n  | \"willBlur\"\n  | \"didBlur\";\n\nexport type NavigationState = {\n  key: string;\n  index: number;\n  routes: Route[];\n  routeName: string;\n  transitions: {\n    pushing: string[];\n    popping: string[];\n  };\n  params?: { [key: string]: unknown };\n};\n\nexport type NavigationProp<RouteName = string, Params = object> = {\n  navigate(routeName: RouteName): void;\n  goBack(): void;\n  goBack(key: string | null): void;\n  addListener: (\n    event: NavigationEventName,\n    callback: () => void\n  ) => { remove: () => void };\n  isFocused(): boolean;\n  state: NavigationState;\n  setParams(params: Params): void;\n  getParam(): Params;\n  dispatch(action: { type: string }): void;\n  isFirstRouteInParent(): boolean;\n  dangerouslyGetParent(): NavigationProp | undefined;\n};\n\nexport type SharedElementEventSubscription = {\n  remove(): void;\n};\n\nexport type SharedElementStrictConfig = {\n  readonly id: string;\n  readonly otherId: string;\n  readonly animation: SharedElementAnimation;\n  readonly resize?: SharedElementResize;\n  readonly align?: SharedElementAlign;\n  readonly debug?: boolean;\n};\n\nexport type SharedElementsStrictConfig = SharedElementStrictConfig[];\n\nexport type SharedElementConfig =\n  | {\n      readonly id: string;\n      readonly otherId?: string;\n      readonly animation?: SharedElementAnimation;\n      readonly resize?: SharedElementResize;\n      readonly align?: SharedElementAlign;\n      readonly debug?: boolean;\n    }\n  | string;\n\nexport type SharedElementsConfig = SharedElementConfig[];\n\nexport type SharedElementAnimatedValue = any;\n\nexport type SharedElementsComponentConfig = (\n  navigation: NavigationProp,\n  otherNavigation: NavigationProp,\n  showing: boolean\n) => SharedElementsConfig | undefined;\n\nexport type SharedElementSceneComponent = React.ComponentType<any> & {\n  sharedElements: SharedElementsComponentConfig;\n};\n"]}